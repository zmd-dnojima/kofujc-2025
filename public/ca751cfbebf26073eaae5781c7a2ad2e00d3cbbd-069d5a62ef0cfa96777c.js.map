{"version":3,"file":"ca751cfbebf26073eaae5781c7a2ad2e00d3cbbd-069d5a62ef0cfa96777c.js","mappings":"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","sources":["webpack://kofujc/./node_modules/camelcase/index.js","webpack://kofujc/./node_modules/decode-uri-component/index.js","webpack://kofujc/./node_modules/filter-obj/index.js","webpack://kofujc/../src/image-utils.ts","webpack://kofujc/../src/components/hooks.ts","webpack://kofujc/../src/components/layout-wrapper.tsx","webpack://kofujc/../src/components/picture.tsx","webpack://kofujc/../src/components/placeholder.tsx","webpack://kofujc/../src/components/main-image.tsx","webpack://kofujc/../src/components/gatsby-image.server.tsx","webpack://kofujc/../src/components/gatsby-image.browser.tsx","webpack://kofujc/../src/components/static-image.server.tsx","webpack://kofujc/../src/components/static-image.tsx","webpack://kofujc/./src/components/contactArea.js","webpack://kofujc/./node_modules/query-string/index.js","webpack://kofujc/./node_modules/split-on-first/index.js","webpack://kofujc/./node_modules/strict-uri-encode/index.js"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher) || [];\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import * as React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\nimport { Link, graphql } from \"gatsby\" \nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\"\n\n//fontswesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronRight,faEnvelope,faPhone } from \"@fortawesome/free-solid-svg-icons\"\n\nimport * as style from \"../styles/common.module.scss\"\n\n\n\nconst ContactArea = (props) => {\n\n    return (\n        <div className={style.contactArea}>\n                    {/* <div className={style.bg}><StaticImage src=\"../images/contact_bg.jpg\" alt=\"contact_bg\" placeholder=\"blurred\" quality ={90} layout=\"fullWidth\"/></div> */}\n                    <div className={style.gridbox}>\n                        <div className={style.contactTxt}>\n                            <div className={style.txt_1}>その一歩で、<br/>君が変わる、<br/>まちが変わる</div>\n                            <div className={style.txt_2}>一般社団法人甲府青年会議所は<br/>2025年度入会募集しております</div>\n                        </div>\n                        <Link to=\"/contact/\">\n                        <div className={style.btnbox}>\n                                <div className={style.envelop}>入会案内</div>\n                        </div>\n                        </Link>\n                    </div>\n                    \n        </div>\n    )\n}\n\nexport default ContactArea","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${encode(object.fragmentIdentifier, options)}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n"],"names":["UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","Array","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","map","x","trim","filter","length","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","lastIndex","m1","charAt","_","identifier","m","postProcess","module","exports","token","singleMatcher","multiMatcher","decodeComponents","components","split","decodeURIComponent","err","left","right","prototype","concat","call","decode","tokens","match","encodedURI","replaceMap","exec","result","entries","Object","keys","key","customDecodeURIComponent","obj","predicate","ret","isArr","val","indexOf","W","hasNativeLazyLoadSupport","HTMLImageElement","z","e","t","a","s","width","height","className","style","P","h","loading","shouldLoad","opacity","A","r","n","o","l","backgroundColor","position","top","bottom","objectFit","objectPosition","d","transition","H","F","_ref5","layout","paddingTop","maxWidth","display","alt","role","src","G","children","u","V","B","U","srcSet","decoding","Y","fallback","sources","sizes","_ref6","media","type","X","propTypes","displayName","J","Z","Error","K","Q","ee","te","ae","_len","arguments","_key","c","ie","image","se","re","ne","Set","oe","le","de","as","class","g","onStartLoad","p","onLoad","onError","f","w","y","b","v","E","k","S","M","N","$","JSON","stringify","images","I","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ce","he","ue","__imageData","__error","console","warn","ge","imgClassName","imgStyle","placeholder","pe","_len2","_key2","me","fe","we","props","React","Link","to","strictUriEncode","decodeComponent","splitOnFirst","filterObject","validateArrayFormatSeparator","value","encode","strict","encodeURIComponent","keysSorter","sort","Number","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","parseBooleans","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","accumulator","undefined","includes","isEncodedArray","newValue","item","parserForArrayFormat","create","param","reduce","Boolean","object","shouldFilter","skipNull","skipEmptyString","index","encoderForArrayFormat","objectCopy","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","getHash","pick","exclude","exclusionFilter","separator","separatorIndex","str","charCodeAt","toString"],"sourceRoot":""}